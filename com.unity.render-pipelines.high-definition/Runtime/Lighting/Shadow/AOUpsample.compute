//
// This is a modified version of the SSAO renderer from Microsoft's MiniEngine
// library. The copyright notice from the original version is included below.
//
// The original source code of MiniEngine is available on GitHub.
// https://github.com/Microsoft/DirectX-Graphics-Samples
//

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard
//

#pragma warning(disable : 3568)
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMainInvert MAIN=KMainInvert INVERT
#pragma kernel KMainBlendout MAIN=KMainBlendout BLEND_WITH_HIGHER_RESOLUTION

#include "CoreRP/ShaderLibrary/Common.hlsl"

TEXTURE2D(_LoResDB);
TEXTURE2D(_HiResDB);
TEXTURE2D(_LoResAO1);

SAMPLER(sampler_LoResDB);
SAMPLER(sampler_HiResDB);
SAMPLER(sampler_LoResAO1);

#ifdef COMBINE_LOWER_RESOLUTIONS
TEXTURE2D(_LoResAO2);
SAMPLER(sampler_LoResAO2);
#endif

#ifdef BLEND_WITH_HIGHER_RESOLUTION
TEXTURE2D(_HiResAO);
SAMPLER(sampler_HiResAO);
#endif

RW_TEXTURE2D(float, _AoResult);

CBUFFER_START(cb0)
    float4 _InvLowResolution;
    float4 _InvHighResolution;
    float4 _AdditionalParams;
CBUFFER_END

#define _NoiseFilterStrength _AdditionalParams.x
#define _StepSize            _AdditionalParams.y
#define _BlurTolerance       _AdditionalParams.z
#define _UpsampleTolerance   _AdditionalParams.w

groupshared float gs_depthCache[256];
groupshared float gs_aoCache1[256];
groupshared float gs_aoCache2[256];

void PrefetchData(uint index, float2 uv)
{
    float4 AO1 = GATHER_TEXTURE2D(_LoResAO1, sampler_LoResAO1, uv);

#ifdef COMBINE_LOWER_RESOLUTIONS
    AO1 = min(AO1, GATHER_TEXTURE2D(_LoResAO2, sampler_LoResAO2, uv));
#endif

    gs_aoCache1[index] = AO1.w;
    gs_aoCache1[index + 1] = AO1.z;
    gs_aoCache1[index + 16] = AO1.x;
    gs_aoCache1[index + 17] = AO1.y;

    float4 ID = 1.0 / GATHER_TEXTURE2D(_LoResDB, sampler_LoResDB, uv);
    gs_depthCache[index] = ID.w;
    gs_depthCache[index + 1] = ID.z;
    gs_depthCache[index + 16] = ID.x;
    gs_depthCache[index + 17] = ID.y;
}

float SmartBlur(float a, float b, float c, float d, float e, bool Left, bool Middle, bool Right)
{
    b = Left | Middle ? b : c;
    a = Left ? a : b;
    d = Right | Middle ? d : c;
    e = Right ? e : d;
    return ((a + e) / 2.0 + b + c + d) / 4.0;
}

bool CompareDeltas(float d1, float d2, float l1, float l2)
{
    float temp = d1 * d2 + _StepSize;
    return temp * temp > l1 * l2 * _BlurTolerance;
}

void BlurHorizontally(uint leftMostIndex)
{
    float a0 = gs_aoCache1[leftMostIndex];
    float a1 = gs_aoCache1[leftMostIndex + 1];
    float a2 = gs_aoCache1[leftMostIndex + 2];
    float a3 = gs_aoCache1[leftMostIndex + 3];
    float a4 = gs_aoCache1[leftMostIndex + 4];
    float a5 = gs_aoCache1[leftMostIndex + 5];
    float a6 = gs_aoCache1[leftMostIndex + 6];

    float d0 = gs_depthCache[leftMostIndex];
    float d1 = gs_depthCache[leftMostIndex + 1];
    float d2 = gs_depthCache[leftMostIndex + 2];
    float d3 = gs_depthCache[leftMostIndex + 3];
    float d4 = gs_depthCache[leftMostIndex + 4];
    float d5 = gs_depthCache[leftMostIndex + 5];
    float d6 = gs_depthCache[leftMostIndex + 6];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;
    float d56 = d6 - d5;

    float l01 = d01 * d01 + _StepSize;
    float l12 = d12 * d12 + _StepSize;
    float l23 = d23 * d23 + _StepSize;
    float l34 = d34 * d34 + _StepSize;
    float l45 = d45 * d45 + _StepSize;
    float l56 = d56 * d56 + _StepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);
    bool c46 = CompareDeltas(d45, d56, l45, l56);

    gs_aoCache2[leftMostIndex] = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    gs_aoCache2[leftMostIndex + 1] = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);
    gs_aoCache2[leftMostIndex + 2] = SmartBlur(a2, a3, a4, a5, a6, c24, c35, c46);
}

void BlurVertically(uint topMostIndex)
{
    float a0 = gs_aoCache2[topMostIndex];
    float a1 = gs_aoCache2[topMostIndex + 16];
    float a2 = gs_aoCache2[topMostIndex + 32];
    float a3 = gs_aoCache2[topMostIndex + 48];
    float a4 = gs_aoCache2[topMostIndex + 64];
    float a5 = gs_aoCache2[topMostIndex + 80];

    float d0 = gs_depthCache[topMostIndex + 2];
    float d1 = gs_depthCache[topMostIndex + 18];
    float d2 = gs_depthCache[topMostIndex + 34];
    float d3 = gs_depthCache[topMostIndex + 50];
    float d4 = gs_depthCache[topMostIndex + 66];
    float d5 = gs_depthCache[topMostIndex + 82];

    float d01 = d1 - d0;
    float d12 = d2 - d1;
    float d23 = d3 - d2;
    float d34 = d4 - d3;
    float d45 = d5 - d4;

    float l01 = d01 * d01 + _StepSize;
    float l12 = d12 * d12 + _StepSize;
    float l23 = d23 * d23 + _StepSize;
    float l34 = d34 * d34 + _StepSize;
    float l45 = d45 * d45 + _StepSize;

    bool c02 = CompareDeltas(d01, d12, l01, l12);
    bool c13 = CompareDeltas(d12, d23, l12, l23);
    bool c24 = CompareDeltas(d23, d34, l23, l34);
    bool c35 = CompareDeltas(d34, d45, l34, l45);

    float aoResult1 = SmartBlur(a0, a1, a2, a3, a4, c02, c13, c24);
    float aoResult2 = SmartBlur(a1, a2, a3, a4, a5, c13, c24, c35);

    gs_aoCache1[topMostIndex] = aoResult1;
    gs_aoCache1[topMostIndex + 16] = aoResult2;
}

// We essentially want 5 weights:  4 for each low-res pixel and 1 to blend in when none of the 4 really
// match.  The filter strength is 1 / DeltaZTolerance.  So a tolerance of 0.01 would yield a strength of 100.
// Note that a perfect match of low to high depths would yield a weight of 10^6, completely superceding any
// noise filtering.  The noise filter is intended to soften the effects of shimmering when the high-res depth
// buffer has a lot of small holes in it causing the low-res depth buffer to inaccurately represent it.
float BilateralUpsample(float HiDepth, float HiAO, float4 LowDepths, float4 LowAO)
{
    float4 weights = float4(9, 3, 1, 3) / (abs(HiDepth - LowDepths) + _UpsampleTolerance);
    float TotalWeight = dot(weights, 1) + _NoiseFilterStrength;
    float WeightedSum = dot(LowAO, weights) + _NoiseFilterStrength;// * HiAO;
    return HiAO * WeightedSum / TotalWeight;
}

[numthreads(8, 8, 1)]
void MAIN(uint GI : SV_GroupIndex, uint2 GTid : SV_GroupThreadID, uint2 DTid : SV_DispatchThreadID)
{
    //
    // Load 4 pixels per thread into LDS to fill the 16x16 LDS cache with depth and AO
    //
    PrefetchData(GTid.x << 1 | GTid.y << 5, int2(DTid + GTid - 2) * _InvLowResolution.xy);
    GroupMemoryBarrierWithGroupSync();

    // Goal:  End up with a 9x9 patch that is blurred so we can upsample.  Blur radius is 2 pixels, so start with 13x13 area.

    //
    // Horizontally blur the pixels.	13x13 -> 9x13
    //
    if (GI < 39)
        BlurHorizontally((GI / 3) * 16 + (GI % 3) * 3);
    GroupMemoryBarrierWithGroupSync();

    //
    // Vertically blur the pixels.		9x13 -> 9x9
    //
    if (GI < 45)
        BlurVertically((GI / 9) * 32 + GI % 9);
    GroupMemoryBarrierWithGroupSync();

    //
    // Bilateral upsample
    //
    uint Idx0 = GTid.x + GTid.y * 16;
    float4 LoSSAOs = float4(gs_aoCache1[Idx0 + 16], gs_aoCache1[Idx0 + 17], gs_aoCache1[Idx0 + 1], gs_aoCache1[Idx0]);

    // We work on a quad of pixels at once because then we can gather 4 each of high and low-res depth values
    float2 UV0 = DTid * _InvLowResolution.xy;
    float2 UV1 = DTid * 2 * _InvHighResolution.xy;

#ifdef BLEND_WITH_HIGHER_RESOLUTION
    float4 HiSSAOs = GATHER_TEXTURE2D(_HiResAO, sampler_HiResAO, UV1);
#else
    float4 HiSSAOs = 1.0;
#endif
    float4 LoDepths = GATHER_TEXTURE2D(_LoResDB, sampler_LoResDB, UV0);
    float4 HiDepths = GATHER_TEXTURE2D(_HiResDB, sampler_HiResDB, UV1);

    int2 OutST = DTid << 1;

#ifdef INVERT
    _AoResult[OutST + int2(-1,  0)] = 1.0 - BilateralUpsample(HiDepths.x, HiSSAOs.x, LoDepths.xyzw, LoSSAOs.xyzw);
    _AoResult[OutST + int2( 0,  0)] = 1.0 - BilateralUpsample(HiDepths.y, HiSSAOs.y, LoDepths.yzwx, LoSSAOs.yzwx);
    _AoResult[OutST + int2( 0, -1)] = 1.0 - BilateralUpsample(HiDepths.z, HiSSAOs.z, LoDepths.zwxy, LoSSAOs.zwxy);
    _AoResult[OutST + int2(-1, -1)] = 1.0 - BilateralUpsample(HiDepths.w, HiSSAOs.w, LoDepths.wxyz, LoSSAOs.wxyz);
#else
    _AoResult[OutST + int2(-1,  0)] = BilateralUpsample(HiDepths.x, HiSSAOs.x, LoDepths.xyzw, LoSSAOs.xyzw);
    _AoResult[OutST + int2( 0,  0)] = BilateralUpsample(HiDepths.y, HiSSAOs.y, LoDepths.yzwx, LoSSAOs.yzwx);
    _AoResult[OutST + int2( 0, -1)] = BilateralUpsample(HiDepths.z, HiSSAOs.z, LoDepths.zwxy, LoSSAOs.zwxy);
    _AoResult[OutST + int2(-1, -1)] = BilateralUpsample(HiDepths.w, HiSSAOs.w, LoDepths.wxyz, LoSSAOs.wxyz);
#endif
}
