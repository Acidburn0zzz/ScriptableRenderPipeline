//
// This is a modified version of the SSAO renderer from Microsoft's MiniEngine
// library. The copyright notice from the original version is included below.
//
// The original source code of MiniEngine is available on GitHub.
// https://github.com/Microsoft/DirectX-Graphics-Samples
//

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard
//

#pragma warning(disable : 3568)
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#include "CoreRP/ShaderLibrary/Common.hlsl"
#include "../ShaderVariables.hlsl"

#pragma kernel KMain

RW_TEXTURE2D(float, _LinearZ);
RW_TEXTURE2D(float, _DS2x);
RW_TEXTURE2D_ARRAY(float, _DS2xAtlas);
RW_TEXTURE2D(float, _DS4x);
RW_TEXTURE2D_ARRAY(float, _DS4xAtlas);

RW_TEXTURE2D(float, _Depth);

float Linearize(uint2 st)
{
    float depth = _Depth[st].x;
    float dist = 1.0 / (_ZBufferParams.x * depth + _ZBufferParams.y);
#ifdef UNITY_REVERSED_Z
    if (depth == 0) dist = 1e5;
#else
    if (depth == 1) dist = 1e5;
#endif
    _LinearZ[st] = dist;
    return dist;
}

groupshared float gs_cacheW[256];

[numthreads(8, 8, 1)]
void KMain(uint2 Gid : SV_GroupID, uint GI : SV_GroupIndex, uint2 GTid : SV_GroupThreadID, uint2 DTid : SV_DispatchThreadID)
{
    uint2 startST = Gid << 4 | GTid;
    uint destIdx = GTid.y << 4 | GTid.x;
    gs_cacheW[destIdx +  0 ] = Linearize(startST | uint2(0, 0));
    gs_cacheW[destIdx +  8 ] = Linearize(startST | uint2(8, 0));
    gs_cacheW[destIdx + 128] = Linearize(startST | uint2(0, 8));
    gs_cacheW[destIdx + 136] = Linearize(startST | uint2(8, 8));

    GroupMemoryBarrierWithGroupSync();

    uint ldsIndex = (GTid.x << 1) | (GTid.y << 5);

    float w1 = gs_cacheW[ldsIndex];

    uint2 st = DTid;
    uint slice = ((st.x & 3) | (st.y << 2)) & 15;
    _DS2x[st] = w1;
    _DS2xAtlas[uint3(st >> 2, slice)] = w1;

    if ((GI & 011) == 0)
    {
        st = DTid >> 1;
        slice = ((st.x & 3) | (st.y << 2)) & 15;
        _DS4x[st] = w1;
        _DS4xAtlas[uint3(st >> 2, slice)] = w1;
    }

}
