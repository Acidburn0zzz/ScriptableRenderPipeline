//
// This is a modified version of the SSAO renderer from Microsoft's MiniEngine
// library. The copyright notice from the original version is included below.
//
// The original source code of MiniEngine is available on GitHub.
// https://github.com/Microsoft/DirectX-Graphics-Samples
//

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard
//

#pragma warning(disable : 3568)
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMainInterleaved MAIN=KMainInterleaved INTERLEAVE_RESULT

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

#ifndef INTERLEAVE_RESULT
#define WIDE_SAMPLING 1
#endif

#ifdef INTERLEAVE_RESULT
TEXTURE2D_ARRAY(_Depth);
#else
TEXTURE2D(_Depth);
#endif

RW_TEXTURE2D(float, _Occlusion);

SAMPLER(sampler_Depth);

CBUFFER_START(cb0)
    float4 _InvThicknessTable[3];
    float4 _SampleWeightTable[3];
    float4 _InvSliceDimension;
    float2 _AdditionalParams;
CBUFFER_END

#define _RejectFadeoff _AdditionalParams.x
#define _Intensity _AdditionalParams.y

#if WIDE_SAMPLING
// 32x32 cache size:  the 16x16 in the center forms the area of focus with the 8-pixel perimeter used for wide gathering.
#define TILE_DIM 32
#define THREAD_COUNT_X 16
#define THREAD_COUNT_Y 16
#else
// 16x16 cache size:  the 8x8 in the center forms the area of focus with the 4-pixel perimeter used for gathering.
#define TILE_DIM 16
#define THREAD_COUNT_X 8
#define THREAD_COUNT_Y 8
#endif

groupshared float gs_depthSamples[TILE_DIM * TILE_DIM];

float TestSamplePair(float frontDepth, float invRange, uint base, int offset)
{
    // "Disocclusion" measures the penetration distance of the depth sample within the sphere.
    // Disocclusion < 0 (full occlusion) -> the sample fell in front of the sphere
    // Disocclusion > 1 (no occlusion) -> the sample fell behind the sphere
    float disocclusion1 = gs_depthSamples[base + offset] * invRange - frontDepth;
    float disocclusion2 = gs_depthSamples[base - offset] * invRange - frontDepth;

    float pseudoDisocclusion1 = saturate(_RejectFadeoff * disocclusion1);
    float pseudoDisocclusion2 = saturate(_RejectFadeoff * disocclusion2);

    return saturate(
        clamp(disocclusion1, pseudoDisocclusion2, 1.0) +
        clamp(disocclusion2, pseudoDisocclusion1, 1.0) -
        pseudoDisocclusion1 * pseudoDisocclusion2);
}

float TestSamples(uint centerIdx, uint x, uint y, float invDepth, float invThickness)
{
#if WIDE_SAMPLING
    x <<= 1;
    y <<= 1;
#endif

    float invRange = invThickness * invDepth;
    float frontDepth = invThickness - 0.5;

    if (y == 0)
    {
        // Axial
        return 0.5 * (
            TestSamplePair(frontDepth, invRange, centerIdx, x) +
            TestSamplePair(frontDepth, invRange, centerIdx, x * TILE_DIM)
        );
    }
    else if (x == y)
    {
        // Diagonal
        return 0.5 * (
            TestSamplePair(frontDepth, invRange, centerIdx, x * TILE_DIM - x) +
            TestSamplePair(frontDepth, invRange, centerIdx, x * TILE_DIM + x)
        );
    }
    else
    {
        // L-Shaped
        return 0.25 * (
            TestSamplePair(frontDepth, invRange, centerIdx, y * TILE_DIM + x) +
            TestSamplePair(frontDepth, invRange, centerIdx, y * TILE_DIM - x) +
            TestSamplePair(frontDepth, invRange, centerIdx, x * TILE_DIM + y) +
            TestSamplePair(frontDepth, invRange, centerIdx, x * TILE_DIM - y)
        );
    }
}

[numthreads(THREAD_COUNT_X, THREAD_COUNT_Y, 1)]
void MAIN(uint2 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID)
{
#if WIDE_SAMPLING
    float2 QuadCenterUV = int2(DTid.xy + GTid - 7) * _InvSliceDimension.xy;
#else
    float2 QuadCenterUV = int2(DTid.xy + GTid - 3) * _InvSliceDimension.xy;
#endif

    // Fetch four depths and store them in LDS
#ifdef INTERLEAVE_RESULT
    float4 depths = GATHER_TEXTURE2D_ARRAY(_Depth, sampler_Depth, QuadCenterUV, DTid.z);
#else
    float4 depths = GATHER_TEXTURE2D(_Depth, sampler_Depth, QuadCenterUV);
#endif

    int destIdx = GTid.x * 2 + GTid.y * 2 * TILE_DIM;
    gs_depthSamples[destIdx] = depths.w;
    gs_depthSamples[destIdx + 1] = depths.z;
    gs_depthSamples[destIdx + TILE_DIM] = depths.x;
    gs_depthSamples[destIdx + TILE_DIM + 1] = depths.y;

    GroupMemoryBarrierWithGroupSync();

#if WIDE_SAMPLING
    uint thisIdx = GTid.x + GTid.y * TILE_DIM + 8 * TILE_DIM + 8;
#else
    uint thisIdx = GTid.x + GTid.y * TILE_DIM + 4 * TILE_DIM + 4;
#endif

    const float invThisDepth = 1.0 / gs_depthSamples[thisIdx];

    float ao = 0.0;

//#define SAMPLE_EXHAUSTIVELY

#ifdef SAMPLE_EXHAUSTIVELY
    // 68 samples:  sample all cells in *within* a circular radius of 5
    ao += _SampleWeightTable[0].x * TestSamples(thisIdx, 1, 0, invThisDepth, _InvThicknessTable[0].x);
    ao += _SampleWeightTable[0].y * TestSamples(thisIdx, 2, 0, invThisDepth, _InvThicknessTable[0].y);
    ao += _SampleWeightTable[0].z * TestSamples(thisIdx, 3, 0, invThisDepth, _InvThicknessTable[0].z);
    ao += _SampleWeightTable[0].w * TestSamples(thisIdx, 4, 0, invThisDepth, _InvThicknessTable[0].w);
    ao += _SampleWeightTable[1].x * TestSamples(thisIdx, 1, 1, invThisDepth, _InvThicknessTable[1].x);
    ao += _SampleWeightTable[2].x * TestSamples(thisIdx, 2, 2, invThisDepth, _InvThicknessTable[2].x);
    ao += _SampleWeightTable[2].w * TestSamples(thisIdx, 3, 3, invThisDepth, _InvThicknessTable[2].w);
    ao += _SampleWeightTable[1].y * TestSamples(thisIdx, 1, 2, invThisDepth, _InvThicknessTable[1].y);
    ao += _SampleWeightTable[1].z * TestSamples(thisIdx, 1, 3, invThisDepth, _InvThicknessTable[1].z);
    ao += _SampleWeightTable[1].w * TestSamples(thisIdx, 1, 4, invThisDepth, _InvThicknessTable[1].w);
    ao += _SampleWeightTable[2].y * TestSamples(thisIdx, 2, 3, invThisDepth, _InvThicknessTable[2].y);
    ao += _SampleWeightTable[2].z * TestSamples(thisIdx, 2, 4, invThisDepth, _InvThicknessTable[2].z);
#else // SAMPLE_CHECKER
    // 36 samples:  sample every-other cell in a checker board pattern
    ao += _SampleWeightTable[0].y * TestSamples(thisIdx, 2, 0, invThisDepth, _InvThicknessTable[0].y);
    ao += _SampleWeightTable[0].w * TestSamples(thisIdx, 4, 0, invThisDepth, _InvThicknessTable[0].w);
    ao += _SampleWeightTable[1].x * TestSamples(thisIdx, 1, 1, invThisDepth, _InvThicknessTable[1].x);
    ao += _SampleWeightTable[2].x * TestSamples(thisIdx, 2, 2, invThisDepth, _InvThicknessTable[2].x);
    ao += _SampleWeightTable[2].w * TestSamples(thisIdx, 3, 3, invThisDepth, _InvThicknessTable[2].w);
    ao += _SampleWeightTable[1].z * TestSamples(thisIdx, 1, 3, invThisDepth, _InvThicknessTable[1].z);
    ao += _SampleWeightTable[2].z * TestSamples(thisIdx, 2, 4, invThisDepth, _InvThicknessTable[2].z);
#endif

#ifdef INTERLEAVE_RESULT
    uint2 OutPixel = DTid.xy << 2 | uint2(DTid.z & 3, DTid.z >> 2);
#else
    uint2 OutPixel = DTid.xy;
#endif

    _Occlusion[OutPixel] = lerp(1, ao, _Intensity);
}
