#include "CoreRP/ShaderLibrary/Common.hlsl"
#include "CoreRP/ShaderLibrary/Color.hlsl"
#include "../../ShaderVariables.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KFXAA

#define HDR_MAPUNMAP 1

#define FXAA_SPAN_MAX       (8.0)
#define FXAA_REDUCE_MUL     (1.0 / 8.0)
#define FXAA_REDUCE_MIN     (1.0 / 128.0)

TEXTURE2D(_InputTexture);
RW_TEXTURE2D(float4, _OutputTexture);

SAMPLER(sampler_LinearClamp);

float3 Fetch(float2 coords, float2 offset)
{
    float2 uv = (coords + offset) * _ScreenToTargetScale.xy;
    return SAMPLE_TEXTURE2D_LOD(_InputTexture, sampler_LinearClamp, uv, 0).xyz;
}

float3 Load(int2 icoords, int idx, int idy)
{
    return LOAD_TEXTURE2D(_InputTexture, icoords + int2(idx, idy)).xyz;
}

float3 Map(float3 x)
{
    #if HDR_MAPUNMAP
    return FastTonemap(x);
    #else
    return x;
    #endif
}

float3 Unmap(float3 x)
{
    #if HDR_MAPUNMAP
    return FastTonemapInvert(x);
    #else
    return x;
    #endif
}

[numthreads(8,8,1)]
void KFXAA(uint2 dispatchThreadId : SV_DispatchThreadID)
{
    if (any(dispatchThreadId > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard
    
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId), _ScreenSize.zw, uint2(8u, 8u));

    // Edge detection
    float lumaNW = Luminance(Load(posInputs.positionSS, -1, -1));
    float lumaNE = Luminance(Load(posInputs.positionSS,  1, -1));
    float lumaSW = Luminance(Load(posInputs.positionSS, -1,  1));
    float lumaSE = Luminance(Load(posInputs.positionSS,  1,  1));
    float lumaM  = Luminance(Load(posInputs.positionSS,  0,  0));

    float2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float lumaSum   = lumaNW + lumaNE + lumaSW + lumaSE;
    float dirReduce = max(lumaSum * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    float rcpDirMin = rcp(min(abs(dir.x), abs(dir.y)) + dirReduce);

    dir = min((FXAA_SPAN_MAX).xx, max((-FXAA_SPAN_MAX).xx, dir * rcpDirMin)) * _ScreenSize.zw;

    // Blur
    float3 rgb03 = Map(Fetch(posInputs.positionNDC, dir * (0.0 / 3.0 - 0.5)));
    float3 rgb13 = Map(Fetch(posInputs.positionNDC, dir * (1.0 / 3.0 - 0.5)));
    float3 rgb23 = Map(Fetch(posInputs.positionNDC, dir * (2.0 / 3.0 - 0.5)));
    float3 rgb33 = Map(Fetch(posInputs.positionNDC, dir * (3.0 / 3.0 - 0.5)));

    float3 rgbA = 0.5 * (rgb13 + rgb23);
    float3 rgbB = rgbA * 0.5 + 0.25 * (rgb03 + rgb33);
    
    float lumaB = Luminance(rgbB);
    
    float lumaMin = Min3(lumaM, lumaNW, Min3(lumaNE, lumaSW, lumaSE));
    float lumaMax = Max3(lumaM, lumaNW, Max3(lumaNE, lumaSW, lumaSE));

    float3 rgb = ((lumaB < lumaMin) || (lumaB > lumaMax)) ? rgbA : rgbB;
    _OutputTexture[posInputs.positionSS] = float4(Unmap(rgb), 1.0);
}
