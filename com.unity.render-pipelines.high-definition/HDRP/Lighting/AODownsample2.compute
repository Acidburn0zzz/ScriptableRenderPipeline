//
// This is a modified version of the SSAO renderer from Microsoft's MiniEngine
// library. The copyright notice from the original version is included below.
//
// The original source code of MiniEngine is available on GitHub.
// https://github.com/Microsoft/DirectX-Graphics-Samples
//

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard
//

#pragma warning(disable : 3568)
#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMain

#include "CoreRP/ShaderLibrary/Common.hlsl"

TEXTURE2D(_DS4x);

RW_TEXTURE2D(float, _DS8x);
RW_TEXTURE2D_ARRAY(float, _DS8xAtlas);
RW_TEXTURE2D(float, _DS16x);
RW_TEXTURE2D_ARRAY(float, _DS16xAtlas);

[numthreads(8, 8, 1)]
void KMain(uint GI : SV_GroupIndex, uint2 DTid : SV_DispatchThreadID)
{
    float m1 = _DS4x[DTid.xy << 1];

    uint2 st = DTid;
    uint2 stAtlas = st >> 2;
    uint stSlice = ((st.x & 3) | (st.y << 2)) & 15;
    _DS8x[st] = m1;
    _DS8xAtlas[uint3(stAtlas, stSlice)] = m1;

    if ((GI & 011) == 0)
    {
        uint2 st = DTid >> 1;
        uint2 stAtlas = st >> 2;
        uint stSlice = ((st.x & 3) | (st.y << 2)) & 15;
        _DS16x[st] = m1;
        _DS16xAtlas[uint3(stAtlas, stSlice)] = m1;
    }
}
